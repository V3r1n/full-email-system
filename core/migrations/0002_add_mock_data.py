# Generated by Django 5.2.5 on 2025-08-28 13:39

from django.db import migrations

def create_mock_data(apps, schema_editor):
    User = apps.get_model('core', 'User')
    Queue = apps.get_model('core', 'Queue')
    Ticket = apps.get_model('core', 'Ticket')

    # Create users
    admin_user = User.objects.create_superuser(username='admin', email='admin@example.com', password='password123', name='Admin User')
    user1 = User.objects.create_user(username='janesmith', email='jane@example.com', password='password123', name='Jane Smith', phone_number='123-456-7890')
    user2 = User.objects.create_user(username='johndoe', email='john@example.com', password='password123', name='John Doe', phone_number='098-765-4321')

    # Create queues
    support_queue = Queue.objects.create(name='Support', email_address='support@example.com')
    sales_queue = Queue.objects.create(name='Sales', email_address='sales@example.com')
    billing_queue = Queue.objects.create(name='Billing', email_address='billing@example.com')

    # Add users to queues
    support_queue.members.add(user1, user2)
    sales_queue.members.add(user2)
    billing_queue.members.add(user1)

    # Create tickets
    Ticket.objects.create(
        title='Cannot login to my account',
        description='I am trying to log in, but I keep getting an error message. Please help.',
        status='Open',
        queue=support_queue,
        assigned_to=user1,
        submitter_email='customer1@example.com'
    )
    Ticket.objects.create(
        title='Question about pricing',
        description='I would like to know more about your enterprise pricing plan.',
        status='In Progress',
        queue=sales_queue,
        assigned_to=user2,
        submitter_email='customer2@example.com'
    )
    Ticket.objects.create(
        title='Invoice #1234 overdue',
        description='This is a reminder that invoice #1234 is overdue. Please process the payment.',
        status='Closed',
        queue=billing_queue,
        assigned_to=user1,
        submitter_email='accounting@example.com'
    )
    Ticket.objects.create(
        title='Feature Request: Dark Mode',
        description='I would love to have a dark mode option in the application.',
        status='Open',
        queue=support_queue,
        submitter_email='customer3@example.com'
    )

def delete_mock_data(apps, schema_editor):
    User = apps.get_model('core', 'User')
    Queue = apps.get_model('core', 'Queue')

    User.objects.filter(username__in=['admin', 'janesmith', 'johndoe']).delete()
    Queue.objects.filter(name__in=['Support', 'Sales', 'Billing']).delete()
    # Tickets will be deleted automatically due to the CASCADE on the queue ForeignKey

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_mock_data, delete_mock_data),
    ]
